@model IList<TabularGridSample.Models.Product>

@{
    ViewBag.Title = "Products";
}



@section CustomCss {

<style>
    .arrow {
        display: inline-block;
        height: 16px;
        vertical-align: middle;
        width: 13px;
    }

    .arrow.up {
        background-image: url('@Url.Content("~/Content/Images/arrow-up.png")'); 
    }

    .arrow.down {
        background-image: url('@Url.Content("~/Content/Images/arrow-down.png")');
    }
</style>
}


@helper buildLinks(int start, int end, string innerContent)
{
    for (int i = start; i <= end; i++)
    {
        <ul class="pagination">
            <li class="@(i == ViewBag.CurrentPage ? "active" : "")">
                <a href="@Url.Action("products", "Product1", new { page = i, sortBy = ViewBag.sortBy, isAsc = ViewBag.isAsc.ToString().ToLower(), search = ViewBag.Search })">@(innerContent ?? i.ToString())</a>
            </li>
        </ul>
    }

}


@helper pageLinks()
{
    const int maxPages = 11;

    if (ViewBag.TotalPages <= maxPages)
    {
        @buildLinks(1, (int)ViewBag.TotalPages, null)
        return;
    }

    int pagesAfter = ViewBag.TotalPages - ViewBag.CurrentPage; // Number of pages after current
    int pagesBefore = ViewBag.CurrentPage - 1; // Number of pages before current

    if (pagesAfter <= 4)
    {
        @buildLinks(1, 1, null) // Show 1st page

        int pageSubset = ViewBag.TotalPages - maxPages - 1 > 1 ? ViewBag.TotalPages - maxPages - 1 : 2;
        @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)
        @buildLinks(ViewBag.TotalPages - maxPages + 3, ViewBag.TotalPages, null) // Show last pages

        return; // Exit
    }

    if (pagesBefore <= 4)
    {
        @buildLinks(1, maxPages - 2, null) // Show 1st pages


        int pageSubset = maxPages + 2 < ViewBag.TotalPages ? maxPages + 2 : ViewBag.TotalPages - 1;
        @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)

        @buildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null) // Show last page

        return; // Exit

    }

    if (pagesAfter > 4)
    {
        @buildLinks(1, 1, null) // Show 1st pages

        int pageSubset1 = ViewBag.CurrentPage - 7 > 1 ? ViewBag.CurrentPage - 7 : 2;
        int pageSubset2 = ViewBag.CurrentPage + 7 < ViewBag.TotalPages ? ViewBag.CurrentPage + 7 : ViewBag.TotalPages - 1;

        @buildLinks(pageSubset1, pageSubset1, pageSubset1 == ViewBag.CurrentPage - 4 ? null : "...") // Show 1st page subset (...)

        @buildLinks(ViewBag.CurrentPage - 3, ViewBag.CurrentPage + 3, null) // Show middle pages

        // Show 2nd page subset (...)
        // only show ... if page is contigous to the previous one.
        @buildLinks(pageSubset2, pageSubset2, pageSubset2 == ViewBag.CurrentPage + 4 ? null : "...")
        @buildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null) // Show last page

        return; // Exit

    }
}

@helper sortLink(string name, int id)
{
    <a href="@Url.Action("products", "Product1", new { sortby = id, isasc = (id == ViewBag.sortBy ? (!@ViewBag.isAsc).ToString().ToLower() : true) })">@name</a>
    if (id == ViewBag.sortBy)
    {
        <span class="arrow @(ViewBag.isAsc ? "up" : "down" )"></span>
    }
}
<h2 class="center">Products</h2>
<p>
    <div class="product-search">

        <form action="@Url.Action("products", "Product1")" method="get">
            Search <input id="search" name="search" type="text" value="@ViewBag.Search" />
            <input type="submit" value="Search" />
        </form>

    </div>
</p>

<table class="table">
    @* header *@
    <tr>
        <th>@sortLink("ID", 1)</th>
        <th>@sortLink("Name", 2)</th>
        <th>@sortLink("Number", 3)</th>
        <th>@sortLink("Color", 4)</th>
        <th>@sortLink("Standard Cost", 5)</th>
        <th>@sortLink("List Price", 6)</th>
        <th>@sortLink("Size", 7)</th>
        <th>@sortLink("Weight", 8)</th>
    </tr>


    @{int i = 1;}
    @foreach (var p in Model)
    {
        <tr class="@(i++ % 2 == 0 ? "highlighted" : "")">
            <td>@p.ProductID</td>
            <td>@p.Name</td>
            <td>@p.ProductNumber</td>
            <td>@p.Color</td>
            <td>@p.StandardCost.ToString("C")</td>
            <td>@p.ListPrice.ToString("C")</td>
            <td>@p.Size</td>
            <td>@p.Weight</td>
        </tr>
    }

</table>

<div>
    <b>Page:</b>
</div>
<div>
    @pageLinks()
</div>




